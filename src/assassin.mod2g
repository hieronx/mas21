module assassin[exit=nogoals,focus=new] {
	goals {
		winTheGame.
	}
	program {
		if bel( not(role(assassin)) )
			then exit-module.

  	% If the bot sees any dropped flag, or the enemy flag in their base go to module seeFlag
  	if bel( flag(_, none, _) )
		  then seeFlag.

		% Respawn the agent if it believes it's stuck on the map.
		% 5 is randomly chosen, might need improvement
		if bel( isStuck )
			then respawn.
	  
	if bel( not( hasGoodWeapon ) )
		then getWeapon.

		% if adrenaline is 100, there is a usefull combo and this is a good timing for that combo
		if bel(status(_, _, 100, _), usefullCombo(Combo), goodComboTiming(Combo))
			then combo(Combo).

		% If we see a flag(own or enemy) on the ground, grab/return it
		if bel( not(navigation(nagivating, _)), flag(Team, none, Position), not(flagState(Team, home)) )
			then navigate(Position).

		% If there's a goal to get an item, check if it's still valid and then go to it
		if goal( getItem(ID, Label, ItemType, Position) ) then {
			% Don't go to the item if we don't need it anymore
			if bel( not(usefulItem(Label, ItemType)) )
				then drop(getItem(ID, Label, ItemType, Position)).

			% Don't go to the item if there's no item anymore
			if bel( not(item(ID, Label, ItemType, Position)) )
				then drop(getItem(ID, Label, ItemType, Position)).

			% Otherwise, go to the item
			if not(bel( navigation(navigating, Position) ))
				then navigate(Position).
		}

		% If there's no goal to get an item, and there's a useful item in sight, adopt a goal to go to it
		if not(goal(getItem(_, _, _, _))), bel(item(UnrealID, Label, ItemType, Position), usefulItem(Label, ItemType))
			then adopt( getItem(UnrealID, Label, ItemType, Position) ).

		% if there's no useful item anywhere, go to a pickup location
		if bel( not(navigation(navigating, _)), pickup(UnrealID, _,_) )
			then navigate(UnrealID).
	
	}				
}
